/*leetcode ->> 209. Minimum Size Subarray Sum

Given an array of positive integers nums and a positive integer target, return the minimal length of a subarray whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.

Example 1:
Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.

Example 2:
Input: target = 4, nums = [1,4,4]
Output: 1

Example 3:
Input: target = 11, nums = [1,1,1,1,1,1,1,1]
Output: 0

1 ->> Approch (Brute Force)
We can solve this using a brute force approach where we will try all possible contiguous subarrays and seeing the Exp-3 we can draw some boudary cases. but this approch gives tle.
*/
#include <bits/stdc++.h>
using namespace std;
// int minSubArrayLen(int t, vector<int> &nums)
// {
//     int n = nums.size();
//     // boudary cases
//     if (n == 1 and nums[0] < t)
//         return 0;
//     if (accumulate(nums.begin(), nums.end(), 0) < t)
//         return 0; // from the exp -3 and it's an ovious one.
//     int res = INT_MAX;
//     for (int i = 0; i < n; i++)
//     {
//         int crrsum = 0;
//         for (int j = i; j < n; j++)
//         {
//             crrsum += nums[j];
//             if (crrsum >= t)
//             {
//                 res = min(res, j - i + 1);
//                 break;
//             }
//         }
//     }
//     return res == INT_MAX ? 0 : res;
// }
/*
Approch -2 (sliding window)
 
*/
class Solution {
public:
    int minSubArrayLen(int t, vector<int>& nums) {
        if(nums.size() == 1 and nums[0] < t)return 0;
        if(accumulate(nums.begin(),nums.end(),0) < t)return 0;
        int n=nums.size();
        int currsum=0;
        int res=INT_MAX;
        int window_s=0;
        for(int i=0;i<n;i++){
            currsum+=nums[i];
            while(currsum >= t){
                res=min(res,i-window_s+1);
                currsum-=nums[window_s];
                window_s++;
            }
        }
        return res == INT_MAX ? 0:res;
    }
};
int main(){
    int n;
    cin>>n;
    vector<int> nums={2, 3, 1, 2, 4, 3};
    Solution s;
    int result = s.minSubArrayLen(n, nums);
    cout << "Minimum length of subarray with sum greater than or equal to " << n << ": " << result << endl;
    return 0;
}
